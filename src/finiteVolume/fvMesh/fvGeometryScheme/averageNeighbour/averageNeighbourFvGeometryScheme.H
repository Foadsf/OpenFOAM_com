/*---------------------------------------------------------------------------*\
  =========                 |
  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
   \\    /   O peration     |
    \\  /    A nd           | www.openfoam.com
     \\/     M anipulation  |
-------------------------------------------------------------------------------
    Copyright (C) 2020 OpenCFD Ltd.
-------------------------------------------------------------------------------
License
    This file is part of OpenFOAM.

    OpenFOAM is free software: you can redistribute it and/or modify it
    under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    OpenFOAM is distributed in the hope that it will be useful, but WITHOUT
    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
    FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
    for more details.

    You should have received a copy of the GNU General Public License
    along with OpenFOAM.  If not, see <http://www.gnu.org/licenses/>.

Class
    Foam::averageNeighbourFvGeometryScheme

Description
    Default geometry calculation scheme. Slight stabilisation for bad meshes.

SourceFiles
    averageNeighbourFvGeometryScheme.C

\*---------------------------------------------------------------------------*/

#ifndef averageNeighbourFvGeometryScheme_H
#define averageNeighbourFvGeometryScheme_H

#include "highAspectRatioFvGeometryScheme.H"

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

namespace Foam
{

class primitiveMesh;

/*---------------------------------------------------------------------------*\
               Class averageNeighbourFvGeometryScheme Declaration
\*---------------------------------------------------------------------------*/

class averageNeighbourFvGeometryScheme
:
    public highAspectRatioFvGeometryScheme
{
private:

        //- No copy construct
        averageNeighbourFvGeometryScheme
        (
            const averageNeighbourFvGeometryScheme&
        ) = delete;

        //- No copy assignment
        void operator=(const averageNeighbourFvGeometryScheme&) = delete;


protected:

        //- Average neighbouring cell centres to minimise non-ortho
        tmp<pointField> averageNeighbourCentres
        (
            const pointField& cellCentres,
            const vectorField& faceNormals,
            const scalarField& faceWeights
        ) const;

        tmp<pointField> averageCentres
        (
            const pointField& cellCentres,
            const pointField& faceCentres,
            const vectorField& faceNormals
        ) const;


public:

    //- Runtime type information
    TypeName("averageNeighbour");


    // Constructors

        //- Construct from mesh
        averageNeighbourFvGeometryScheme
        (
            const fvMesh& mesh,
            const dictionary& dict
        );


    //- Destructor
    virtual ~averageNeighbourFvGeometryScheme() = default;


    // Member Functions

        //- Do what is necessary if the mesh has moved
        virtual void movePoints();
};


// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

} // End namespace Foam

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

#endif

// ************************************************************************* //
