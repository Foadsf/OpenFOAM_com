/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  v2012                                 |
|   \\  /    A nd           | Website:  www.openfoam.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      controlDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

application     PDRFoam;

startFrom       latestTime;

startTime       0;

stopAt          endTime;

endTime         0.5;

deltaT          5e-06;

writeControl    runTime;

writeInterval   0.01;

purgeWrite      0;

writeFormat     ascii;

writePrecision  8;

writeCompression off;

timeFormat      general;

timePrecision   8;

runTimeModifiable yes;

adjustTimeStep  yes;

maxCo           0.3;

maxDeltaT       1;

functions
{
    normalisedGradP
    {
        libs    (utilityFunctionObjects);
        type     coded;
        name     normalisedGradP;

        writeControl    none;
        writeInterval   -1;
        executeControl  timeStep;
        executeInterval -1;

        codeExecute
        #{

            const volScalarField& p = mesh().lookupObject<volScalarField>("p");

            if (!mesh().foundObject<volScalarField>("normalisedGradP"))
            {
                volScalarField* normalisedGradPPtr =
                    new volScalarField("normalisedGradP", mag(fvc::grad(p)));

                normalisedGradPPtr->store();

                Info << "Found normalisedGradP"<< endl;
            }

            volScalarField& normalisedGradP =
                mesh().lookupObjectRef<volScalarField>("normalisedGradP");

            normalisedGradP = mag(fvc::grad(p));

            Info << "Found not normalisedGradP"<< max(normalisedGradP) << endl;

        #};

    }
}

// ************************************************************************* //
